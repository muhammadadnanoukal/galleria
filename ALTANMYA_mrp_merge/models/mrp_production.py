# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import api, fields, models, _


class MrpProduction(models.Model):
    _inherit = 'mrp.production'

    move_raw_ids = fields.One2many(
        'stock.move', 'raw_material_production_id', 'Components',
        copy=False, states={'done': [('readonly', True)], 'cancel': [('readonly', True)]},
        domain=[('scrapped', '=', False)])
    merged = fields.Boolean(compute='_compute_merged')
    aggregated = fields.Boolean(default=False)
    show_source_mo = fields.Boolean(default=False)
    pricelist_id = fields.Many2one('product.pricelist', string='Pricelist', readonly=False)
    total_amount = fields.Float('Total Amount', compute='_compute_amount', store=True, tracking=True)
    show_update_pricelist = fields.Boolean(string='Has Pricelist Changed',
                                           help="Technical Field, True if the pricelist was changed;\n"
                                                " this will then display a recomputation button")
    components_details_ids = fields.One2many('components.details', 'production_id', string="Components Details")
    color = fields.Many2one('product.attribute.value', string="Default Color")
    toggle_bom_details = fields.Boolean(default=False)
    sale_order_line_id = fields.Many2one('sale.order.line')

    @api.model
    def create(self, vals):
        res = super().create(vals)
        return res

    # def action_view_mrp_production_integrator(self):
    #     self.ensure_one()
    #     mrp_production_ids = self._get_sources().ids
    #     action = {
    #         'res_model': 'mrp.production',
    #         'type': 'ir.actions.act_window',
    #     }
    #     if len(mrp_production_ids) == 1:
    #         action.update({
    #             'view_mode': 'form',
    #             'res_id': mrp_production_ids[0],
    #         })
    #     else:
    #         action.update({
    #             'name': _("MO Generated by %s") % self.name,
    #             'domain': [('id', 'in', mrp_production_ids)],
    #             'view_mode': 'tree,form',
    #         })
    #     return action

    def show_components_details(self):
        self.toggle_bom_details = True
        details_ids = self.components_details_ids.ids
        self.components_details_ids = [(2, line) for line in details_ids]
        next_sequence = 0
        for move in self.move_raw_ids:
            if move.product_id.variant_bom_ids:
                bom = move.product_id.variant_bom_ids[0]
            else:
                bom = move.product_id.product_tmpl_id.bom_ids.filtered(lambda b: not b.product_id)
            if bom:
                if bom.product_id:
                    move_name_section = move.product_id.name
                    if move.product_id.combination_indices != '':
                        ci_ids = move.product_id.combination_indices.split(',')
                        ptav = self.env['product.template.attribute.value'].browse([int(val) for val in ci_ids])
                        attrs = ", ".join(val.product_attribute_value_id.attribute_id.name + ': ' + val.product_attribute_value_id.name for val in ptav)
                        move_name_section = move_name_section + ' (' + attrs + ') '
                else:
                    move_name_section = move.product_tmpl_id.name
                next_sequence = next_sequence + 1
                move_section_line = self.env['components.details'].create({
                    'display_type': 'line_section',
                    'name': move_name_section,
                    'sequence': next_sequence,
                    'product_uom': False,
                    'product_qty': 0.0,
                    'product_id': False
                })
                self.components_details_ids = [(4, move_section_line.id, False)]
                for line in bom.bom_line_ids:
                    next_sequence = next_sequence + 1
                    move_section_line = self.env['components.details'].create({
                        'name': line.product_id.name,
                        'product_id': line.product_id.id,
                        'product_qty': line.product_qty,
                        'product_uom': line.product_uom_id.id,
                        'sequence': next_sequence
                    })
                    self.components_details_ids = [(4, move_section_line.id, False)]
            else:
                move_name_section = move.product_id.name
                next_sequence = next_sequence + 1
                move_section_line = self.env['components.details'].create({
                    'display_type': 'line_section',
                    'name': move_name_section,
                    'sequence': next_sequence,
                    'product_uom': False,
                    'product_qty': 0.0,
                    'product_id': False
                })
                self.components_details_ids = [(4, move_section_line.id, False)]

    def hide_components_details(self):
        self.toggle_bom_details = False
        details_ids = self.components_details_ids.ids
        self.components_details_ids = [(2, line) for line in details_ids]
        next_sequence = 0
        for move in self.move_raw_ids:
            if move.product_id:
                move_name_section = move.product_id.name
                if move.product_id.combination_indices != '':
                    ci_ids = move.product_id.combination_indices.split(',')
                    ptav = self.env['product.template.attribute.value'].browse([int(val) for val in ci_ids])
                    attrs = ", ".join(
                        val.product_attribute_value_id.attribute_id.name + ': ' + val.product_attribute_value_id.name
                        for val in ptav)
                    move_name_section = move_name_section + ' (' + attrs + ') '
            else:
                move_name_section = move.product_tmpl_id.name
            move_section_line = self.env['components.details'].create({
                'display_type': 'line_section',
                'name': move_name_section,
                'sequence': next_sequence,
                'product_uom': False,
                'product_qty': 0.0,
                'product_id': False
            })
            self.components_details_ids = [(4, move_section_line.id, False)]

    @api.onchange('bom_id')
    def onchange_bom_id(self):
        if self.bom_id:
            product_template_ids = self._recompute_templates_ids_for_color()
            return {'domain': {'color': [('attribute_id.name', 'like', 'لون'),
                                         ('attribute_id.product_tmpl_ids', 'in', product_template_ids)]}}

    @api.onchange('product_id')
    def _onchange_product_id(self):
        super()._onchange_move_finished_product()
        if self.move_raw_ids:
            for move in self.move_raw_ids:
                move._compute_can_change_color()

    @api.onchange('move_raw_ids')
    def _onchange_move_raw_ids(self):
        for move in self.move_raw_ids:
            move._compute_can_change_color()

    @api.onchange('color')
    def _onchange_color(self):
        color_attribute_id = self.color.attribute_id.id
        color_id = self.color.id
        if not self.move_raw_ids:
            return
        no_self_id = False
        self_id = str(self.id)
        location_src_id = self.location_src_id.id
        production_location_id = self.production_location_id.id
        if 'x' or 'virtual' in self_id:
            moves_to_create = [move.copy_data() for move in self.move_raw_ids]
            self.move_raw_ids = [(2, move.id) for move in self.move_raw_ids]
            moves = [self.env['stock.move'].create(move[0]) for move in moves_to_create]
            self.move_raw_ids = [(4, move.id, None) for move in moves]
            no_self_id = True
        else:
            moves = self.move_raw_ids
        product_id = self.product_id.id
        bom_id = self.bom_id.id
        product_uom_id = self.product_uom_id.id
        self_template_ids = self._recompute_templates_ids_for_color()
        for move in moves:
            move._compute_can_change_color()
            move.location_id = location_src_id
            move.location_dest_id = production_location_id
            if move.product_id.product_tmpl_id.id in self_template_ids:
                for value_id in move.product_id.product_template_variant_value_ids:
                    if value_id.attribute_id.id == color_attribute_id:
                        new_color_id = self.env['product.template.attribute.value'].search(
                            [('product_attribute_value_id', '=', color_id),
                             ('product_tmpl_id', '=', move.product_id.product_tmpl_id.id)])
                        move.product_id.product_template_variant_value_ids = [(3, value_id.id)]
                        move.product_id.product_template_variant_value_ids = [(4, new_color_id.id)]
                        if move.product_id.variant_bom_ids:
                            bom = move.product_id.variant_bom_ids[0]
                            if bom:
                                templates_standard_recs = self.env['product.attribute.value'].search(
                                    [('name', 'ilike', 'standard')])
                                templates_standard_ids = []
                                for rec in templates_standard_recs:
                                    templates_standard_ids.extend(rec.attribute_id.product_tmpl_ids.ids)
                                for line in bom.bom_line_ids:
                                    if line.product_id.product_tmpl_id.id in templates_standard_ids:
                                        other_attrs_vals_ids = []
                                        line.product_id._compute_combination_indices()
                                        for val in line.product_id.product_template_variant_value_ids:
                                            if val.attribute_id.id != color_attribute_id:
                                                other_attrs_vals_ids.append(val.id)
                                        new_line_color_id = self.get_new_line_color(new_color_id,
                                                                                    line.product_id.product_tmpl_id.id)
                                        other_attrs_vals_ids.append(new_line_color_id.id)
                                        new_product = self.get_new_variant(line.product_id,
                                                                           [(4, val) for val in other_attrs_vals_ids])
                                        new_line = self.env['mrp.bom.line'].create({'product_id': new_product.id,
                                                                                    'product_qty': line.product_qty,
                                                                                    'product_uom_id': line.product_uom_id.id,
                                                                                    'bom_id': bom.id})
                                        bom.bom_line_ids = [(3, line.id)]
                                        bom.bom_line_ids = [(4, new_line.id)]
                        elif move.product_id.product_tmpl_id.bom_ids:
                            bom = move.product_id.product_tmpl_id.bom_ids.filtered(lambda b: not b.product_id)
                            if bom:
                                new_bom = bom.copy()
                                new_bom.write({'product_id': move.product_id.id})
                                move.product_id.variant_bom_ids = [(4, new_bom.id)]
                                templates_standard_recs = self.env['product.attribute.value'].search(
                                    [('name', 'ilike', 'standard')])
                                templates_standard_ids = []
                                for rec in templates_standard_recs:
                                    templates_standard_ids.extend(rec.attribute_id.product_tmpl_ids.ids)
                                for line in new_bom.bom_line_ids:
                                    if line.product_id.product_tmpl_id.id in templates_standard_ids:
                                        other_attrs_vals_ids = []
                                        line.product_id._compute_combination_indices()
                                        for val in line.product_id.product_template_variant_value_ids:
                                            if val.attribute_id.id != color_attribute_id:
                                                other_attrs_vals_ids.append(val.id)
                                        new_line_color_id = self.get_new_line_color(new_color_id,
                                                                                    line.product_id.product_tmpl_id.id)
                                        other_attrs_vals_ids.append(new_line_color_id.id)
                                        new_product = self.get_new_variant(line.product_id,
                                                                           [(4, val) for val in other_attrs_vals_ids])
                                        new_line = self.env['mrp.bom.line'].create({'product_id': new_product.id,
                                                                                    'product_qty': line.product_qty,
                                                                                    'product_uom_id': line.product_uom_id.id,
                                                                                    'bom_id': new_bom.id})
                                        new_bom.bom_line_ids = [(3, line.id)]
                                        new_bom.bom_line_ids = [(4, new_line.id)]
                move.product_id._compute_combination_indices()
        self.write({'color': color_id,
                    'bom_id': bom_id,
                    'product_id': product_id,
                    'product_uom_id': product_uom_id,
                    'production_location_id': production_location_id,
                    'location_src_id': location_src_id})
        if no_self_id:
            self.move_raw_ids = [(2, move.id) for move in self.move_raw_ids]
            self.move_raw_ids = [(4, move.id, None) for move in moves]
        for move in self.move_raw_ids:
            if move.product_id.product_tmpl_id.id in self_template_ids:
                move.color = self.color.id
        self.hide_components_details()

    def _recompute_templates_ids_for_color(self):
        bom_line_ids = []
        for move in self.move_raw_ids:
            move._compute_can_change_color()
        for line in self.bom_id.bom_line_ids:
            bom_line_ids.extend(line.product_id.product_tmpl_id.ids)
        templates_standard_recs = self.env['product.attribute.value'].search([('name', 'ilike', 'standard')])
        templates_standard_ids = []
        for rec in templates_standard_recs:
            templates_standard_ids.extend(rec.attribute_id.product_tmpl_ids.ids)
        intersection = list(set(bom_line_ids) & set(templates_standard_ids))
        return intersection

    def update_components_prices(self):
        self.ensure_one()
        for move in self.move_raw_ids:
            move.update_product()
            move.price_unit = move.compute_price_unit()
            move._compute_price_subtotal()
        self._compute_amount()
        self.show_update_pricelist = False
        self.message_post(body=_("Product prices have been recomputed according to pricelist <b>%s<b> ",
                                 self.pricelist_id.display_name))

    @api.depends('move_raw_ids.price_unit', 'move_raw_ids.product_qty', 'move_raw_ids.price_subtotal')
    def _compute_amount(self):
        for rec in self:
            rec.total_amount = sum(rec.move_raw_ids.mapped('price_subtotal'))
            self.sale_order_line_id.manufacturing_cost = rec.total_amount

    @api.onchange('pricelist_id')
    def _onchange_pricelist_id(self):
        if self.move_raw_ids and self.pricelist_id and self._origin.pricelist_id != self.pricelist_id:
            self.show_update_pricelist = True
        else:
            self.show_update_pricelist = False

    def _compute_merged(self):
        self.onchange_bom_id()
        merged_mo = self.env['mrp.production'].search([('merged_by', '=', self.id)])
        if not merged_mo.id:
            self.merged = False
        else:
            self.merged = True

    merged_by = fields.Integer(default=-1)

    def _copy_workorder(self, workorder, merged_mo_id, source_production):
        workorder_values = {
            'name': workorder.name,
            'production_id': merged_mo_id,
            'workcenter_id': workorder.workcenter_id.id,
            'product_uom_id': workorder.product_uom_id.id,
            'operation_id': workorder.operation_id.id,
            'duration_expected': workorder.duration_expected,
            'source_production': source_production,
            'state': 'pending',
        }
        copied_workorder = self.env['mrp.workorder'].create(workorder_values)
        return copied_workorder

    def get_all_components(self, production, move_raw_merged):
        if len(production._get_children().ids) == 0:
            return [move.copy({'source_production': production.name}).id for move in production.move_raw_ids]
        else:
            for child_mo in production._get_children():
                move_raw_merged.extend(self.get_all_components(child_mo, move_raw_merged))
        return move_raw_merged

    def get_all_workorders(self, production, merged_mo, workorders_merged):
        if len(production._get_children().ids) == 0:
            return [self._copy_workorder(workorder=workorder, merged_mo_id=merged_mo.id, source_production=production.name).id for workorder in production.workorder_ids]
        else:
            for child_mo in production._get_children():
                workorders_merged.extend(self.get_all_workorders(child_mo, merged_mo, workorders_merged))
        return workorders_merged

    def create_merged_mo(self):
        merged_mo = self.env['mrp.production'].create({
            'state': 'draft',
            'product_id': self.product_id.id,
            'product_qty': self.product_qty,
            'product_uom_id': self.product_uom_id.id,
            'bom_id': self.bom_id.id,
            'date_planned_start': self.date_planned_start,
            'components_availability': self.components_availability,
            'user_id': self.user_id.id,
            'company_id': self.company_id.id,
            'merged_by': self.id,
            'sale_order_line_id': self.sale_order_line_id.id,
            'move_raw_ids': [(4, component_id, None) for component_id in
                             self.get_all_components(production=self, move_raw_merged=[])],
            'show_source_mo': True
        })
        merged_mo.write({'workorder_ids': [(4, workorder_id, None) for workorder_id in
                              self.get_all_workorders(production=self, merged_mo=merged_mo, workorders_merged=[])]})
        for move in merged_mo.move_raw_ids:
            move.sale_order_source = self.procurement_group_id.mrp_production_ids.move_dest_ids.group_id.sale_id.name
        self.merged = True

    def action_view_merged_mo(self):
        action = {
            'res_model': 'mrp.production',
            'type': 'ir.actions.act_window',
            'views': [[self.env.ref('mrp.mrp_production_form_view').id, 'form']],
            'name': _("Merged Manufacturing Orders Generated by %s", self.name),
            'context': self.env.context,
            'res_id': self.env['mrp.production'].search([('merged_by', '=', self.id)]).id,
        }
        return action

    def aggregate_components(self):
        aggregated_moves = {}
        for move in self.move_raw_ids:
            sorted_product_key_attribute = move.product_id.product_template_variant_value_ids.sorted(
                lambda value: value.id)
            sorted_attributes_ids = ",".join(str(item.id) for item in sorted_product_key_attribute)
            key = move.product_id.name + '-' + sorted_attributes_ids
            if key in aggregated_moves:
                aggregated_moves[key].product_uom_qty = aggregated_moves[key].product_uom_qty + move.product_uom_qty
            else:
                aggregate_move = move.copy()
                aggregate_move.source_production = 'none'
                aggregated_moves[key] = aggregate_move
        return aggregated_moves

    def aggregate_workorders(self):
        aggregated_workorders = {}
        new_aggregated_ids = []
        for workorder in self.workorder_ids:
            workorder_name = workorder.name
            workorder_workcenter_name = workorder.workcenter_id.name
            workorder_product_name = workorder.product_id.name
            key = workorder_name + '-' + workorder_workcenter_name + '-' + workorder_product_name
            if key in aggregated_workorders:
                aggregated_workorders[key].duration_expected = aggregated_workorders[key].duration_expected + workorder.duration_expected
            else:
                aggregate_workorder = self._copy_workorder(workorder, self.id, source_production='none')
                new_aggregated_ids.append(aggregate_workorder.id)
                aggregated_workorders[key] = aggregate_workorder
        return aggregated_workorders, new_aggregated_ids

    def aggregate_components_and_workorders(self):
        aggregated_moves = self.aggregate_components()
        aggregated_workorders, na_ids = self.aggregate_workorders()
        for workorder in self.workorder_ids:
            if workorder.id not in na_ids:
                workorder.unlink()
        self.write({'move_raw_ids': [(5, 0, 0)], 'aggregated': True, 'show_source_mo': False})
        self.write({'move_raw_ids': [(4, value.id, None) for _, value in aggregated_moves.items()],
                    'workorder_ids': [(4, value.id, None) for _, value in aggregated_workorders.items()]})
        for move in self.move_raw_ids:
            move.production_id = self.id
            move.price_unit = move.compute_price_unit()
            move._compute_price_subtotal()

    def get_new_variant(self, p, attribute_values):
        attribute_values_ids = [t[1] for t in attribute_values]
        variants = self.env['product.product'].search([('product_tmpl_id', '=', p.product_tmpl_id.id)])
        for variant in variants:
            if len(list(set(variant.product_template_variant_value_ids.ids) & set(attribute_values_ids))) == len(
                    attribute_values_ids):
                return variant
        print(p)
        print(variants)
        product_variant = self.env['product.product'].create({
            'product_tmpl_id': p.product_tmpl_id.id,
            'detailed_type': p.detailed_type,
            'invoice_policy': p.invoice_policy,
            'expense_policy': p.expense_policy,
            'uom_id': p.uom_id.id,
            'uom_po_id': p.uom_po_id.id,
            'lst_price': p.lst_price,
            'produce_delay': p.produce_delay,
            'sale_delay': p.sale_delay if p.sale_ok else False,
            'property_account_expense_id': p.property_account_expense_id,
            'property_account_creditor_price_difference': p.property_account_creditor_price_difference,
            'property_account_income_id': p.property_account_income_id,
            'taxes_id': p.taxes_id.id,
            'standard_price': p.standard_price,
            'categ_id': p.categ_id.id,
            'sale_ok': p.sale_ok,
            'purchase_ok': p.purchase_ok,
            'variant_seller_ids': [(4, e.id) for e in p.variant_seller_ids] if p.purchase_ok else False,
            'purchase_method': p.purchase_method if p.purchase_ok else False,
            'route_ids': [(4, e.id) for e in p.route_ids],
            'route_from_categ_ids': [(4, e.id) for e in p.route_from_categ_ids],
            'property_stock_production': p.property_stock_production.id,
            'property_stock_inventory': p.property_stock_inventory.id,
        })
        product_variant.write({
            'product_template_variant_value_ids': attribute_values,
            'combination_indices': ','.join([str(i) for i in sorted(attribute_values_ids)]),
        })
        return product_variant

    def get_new_line_color(self, new_color_id, line_tmpl_id):
        rec = self.env['product.template.attribute.value'].search(
            [('product_attribute_value_id', '=', new_color_id.product_attribute_value_id.id),
             ('product_tmpl_id', '=', line_tmpl_id)])
        if rec:
            return rec

        attribute_line_id = self.env['product.template.attribute.line'].search([('product_tmpl_id', '=', line_tmpl_id),
                                                                                ('attribute_id', '=',
                                                                                 new_color_id.attribute_id.id)])

        rec = self.env['product.template.attribute.value'].create({
            'product_attribute_value_id': new_color_id.product_attribute_value_id.id,
            'product_tmpl_id': line_tmpl_id,
            'attribute_line_id': attribute_line_id.id
        })
        return rec
